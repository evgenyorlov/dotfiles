set-option -g prefix C-Space 
# Add truecolor support
set-option -sa terminal-overrides ",xterm-256color:Tc"
# Default terminal is 256 colors
set -g default-terminal "screen-256color"

# Scroll History
set -g history-limit 100000

# Mouse support
set -g mouse on

# rename window to reflect current program
setw -g automatic-rename on
# renumber windows when closing window in the middle
set-option -g renumber-windows on

# Index numbering should start at 1
set -g base-index 1
# Base Index should start from 1 instead of 0
set-window-option -g pane-base-index 1
# make pane numbering consistent with windows
setw -g pane-base-index 1
set -g pane-base-index 1
set-option -g pane-base-index 1

# Upon starting to use tmux, I noticed that I had to add a noticeable delay between two characters in a command sequence for it to recognize the command,
# for example between the C-a and n in  C-a n. This is because tmux is waiting for an escape sequence. Fix that by setting escape time to zero.
set -sg escape-time 0

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Expect UTF-8
set -q -g utf8 on

# vim needs this
# https://vi.stackexchange.com/questions/444/how-do-i-reload-the-current-file
set -g focus-events on

# -- Visuals -----

# set terminal title
set -g set-titles on
set -g set-titles-string '#h ❐ #S ● #I #W'

# Status bar

# Status bar at the bottom
set -g status-position bottom

# prefix highlight location
set -g status-right '#{prefix_highlight} | %a %Y-%m-%d %H:%M'

set -g display-panes-time 800 # slightly longer pane indicators display time
# Extend time of messages in command bar
set -g display-time 1000

# Allows longer session names before the window tabs
set -g status-left-length 100
set -g status-right-length 80

# redraw status line every 10 seconds
set -g status-interval 10
# left-align the status bar
set -g status-justify left

# activity
set -g monitor-activity on
set -g visual-activity off

# Source iTerm Solarized colours if possible
# if-shell "test -e ~/.tmux/$ITERM_PROFILE.conf" "source-file ~/.tmux/$ITERM_PROFILE.conf"

# -- Bindings -----

# create session
bind C-c new-session

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# split current window horizontally
bind - split-window -v
# split current window vertically
bind _ split-window -h

# Vim style bindings for pane movement
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# swap current pane with the next one
bind > swap-pane -D
# swap current pane with the previous one
bind < swap-pane -U

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"

# pane resizing
bind -r H resize-pane -L 10
bind -r J resize-pane -D 10
bind -r K resize-pane -U 10
bind -r L resize-pane -R 10

# Mouse wheel support
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e; send-keys -M'"
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e; send-keys -M'"

# Go to beginning of line
bind a send-prefix

# window navigation
unbind n
unbind p
# select previous window
# bind -r C-j previous-window
# select next window
# bind -r C-k next-window
# move to last active window
bind Tab last-window

# -- copy-mode ----

# enter copy mode
bind Enter copy-mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# copy to Mac OSX clipboard
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'

# list paste buffers
bind b list-buffers
# paste from the top paste buffer
bind p paste-buffer
# choose which buffer to paste from
bind P choose-buffer

# -- List of plugins -----

set -g @plugin 'tmux-plugins/tpm'

# Predefined searches for tmux.
# set -g @pluuin 'tmux-plugins/tmux-copycat'
# Plugin for opening highlighted selection directly from Tmux copy mode.
# set -g @plugin 'tmux-plugins/tmux-open'
# Copy to the system clipboard.
# set -g @plugin 'tmux-plugins/tmux-yank'
# Persists tmux environment across system restarts.
set -g @plugin 'tmux-plugins/tmux-resurrect'
# Continuous saving of tmux environment. Automatic restore when tmux is started. Automatic tmux start when computer is turned on.
set -g @plugin 'tmux-plugins/tmux-continuum'
# Nord tmux color scheme
set -g @plugin 'arcticicestudio/nord-tmux'
# Plugin that highlights when you press tmux prefix key
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
